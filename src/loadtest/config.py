from typing import Any, Dict, List

import time
import toml
from pathlib import Path


class Config:
    def __init__(
            self, 
            config_path: Path | str, 
    ):
        self.c: Dict[str, Dict] = toml.load(config_path)
        
        # Load CLI options
        
        if self.c['cli']['is_local']:
            self.c['network'] = self.c['network']['local']
        else:
            self.c['network'] = self.c['network']['global']
            
        # Autogenerated metadata configs
        
        self.c['metadata'] = {
            'bts_unix': int(time.time())
            }
        
        # Append base timestamp to report path
        
        if not self.c['cli']['is_report']:
            del self.c['report']
        else:
            self.c['report']['report_root_path'] = str(Path(self.c['report']['report_root_path']) / str(self.c['metadata']['bts_unix']))
    

    def to_locust_args(self, rps_per_user: int = 0) -> List[str]:
        a = []
        
        a.append('--autostart')    
        a.extend(['--locustfile', self.c['cli']['locustfile']])
        a.extend(['--autoquit', 1])
        a.extend(['--host', 'http://localhost'])
        a.extend(['--users', self.c['load']['users']])
        
        if 'processes' in self.c['load']:
            a.extend(['--processes', self.c['load']['processes']])
        
        if 'run_time' in self.c['load']:
            a.extend(['--run-time', self.c['load']['run_time']])
            
        if 'spawn_rate' in self.c['load']:
            a.extend(['--spawn-rate', self.c['load']['spawn_rate']])
            
        if 'expect_workers' in self.c['load']:
            a.extend(['--processes', self.c['load']['expect_workers']])
            
        if self.c['cli']['is_report']:        
            if self.c['report']['is_report_locust_stats']:
                _rps = int(rps_per_user * self.c['load']['users'] * 10)
                _fn = f"locust-stats-{_rps}rps-{self.c['load']['matrix_size']}msz.csv"
                _fp = str(Path(self.c['report']['report_root_path']) / _fn)
                a.extend(['--csv', _fp])
        
        return [str(v) for v in a]
    
    def export_cli_to_toml(self, path: Path | str, rps_per_user: int = 0):
        # Exclude 'cli' key
        _c = {k: v for k,v in self.c.items() if k != 'cli'}
        
        # Replace 'rps_per_users' with single 'rps_per_user' value
        _c['load']['rps_per_user'] = rps_per_user
        
        with open(path, 'w') as f:
            f.write("# This is an auto-generated file\n")
            f.write('\n')
            toml.dump(_c, f)

    def _repr_subconfig(self, d):
        r = ""
        for k, v in d.items():
            r += f"  * {k}: {v}\n"
        return r[:-1]

    def __repr__(self):        
        r = ""
        for k, sc in self.c.items():
            if k[1] == '_':
                continue
                
            r += f"{k.upper()}:\n"
            r += f"{self._repr_subconfig(sc)}\n"

        return r[:-1]

